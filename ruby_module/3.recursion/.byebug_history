quit
s
n
s
n
s
arr
nbr
s
(1..arr.size).inject { |acc, el| el * acc }
n
display idx
display nbr
display arr
s
quit
n
arr
s
n
display nbr
s
arr
permutations(arr.dup, nbr+1, idx)
nbr
quit
(arr.dup, nbr+1, idx)
 arr + [','] + permutations
result
arr
quit
system 'clear'
arr
shifted
s
n
s
n
arr
s
continue
n
arr
n
arr
n
nbr == (1..arr.length).inject { |acc, el| el * acc }
nbr
(1..arr.length).inject { |acc, el| el * acc }
idx
n
idx
arr
s
n
arr
s
quit
nbr == (1..arr.length).inject { |acc, el| el * acc }
s
n
display idx
display nbr
display arr
n
s
n
nbr == (1..arr.length).inject { |acc, el| el * acc }
s
n
s
n
s
n
s
arr
n
arr
n
idx >= (arr.length-1)
n
arr.length
s
arr
n
nbr > 1
n
system 'clear'
display idx
display nbr
display arr
s
display arr, nbr, idx
s
quit
n
arr
n
s
arr
n
arr
n
s
n
s
n
nbr
n
arr.length-1
n
display idx
display arr
display nbr
nbr
s
quit
display idx
display arr
display nbr
s
n
display nbr
nbr
n
arr
s
quit
old.map {|sub| sub + [array.last]}
n
array
s
n
array
s
n
s
n
s
n
display old
s
n
continue
n
old + old.map {|sub| sub + [array.last]}
old.map {|sub| sub + [array.last]}
n
old
old.map {|sub| sub + [array.last]}
sub
n
old + old.map {|sub| sub + [array.last]}
old
old.map {|sub| sub + [array.last]}
n
s
n
s
n
s
n
display old
display array
s
quit
n
s
n
display target
n
display mid_index
display max_index
display min_index
n
s
n
display mid_index
n
display max_index
display min_index
s
continue
quit
array[idx] == target
n
s
target > array[idx] 
n
target < array[idx]
n
display idx
display array
s
quit
n
s
n
target < array[idx]
n
array[idx] == target
n
display idx
display array
s
display array, idx
s
quit
n
display idx
display array
array
s
continue
quit
array[idx] < target
n
array[idx] == target
display idx
idx
n
idx
s
array.empty?
s
quit
el
!el.is_a?(Array)
s
el
sub_arr
s
el
n
el
sub_arr
el
s
sub_arr
el
s
n
s
n
quit
quti
quit
sub_arr
s
el
n
!el.is_a?(Array)
s
n
